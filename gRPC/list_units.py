import grpc
import pytest
import sys, os
current_dir = os.path.dirname(__file__)
sys.path.append(current_dir)

from Protos.web_api.v1 import common_pb2
from Protos.web_api.v1.dashboard_pb2 import ListUnitsRequest
from Protos.web_api.v1.dashboard_pb2_grpc import DashboardServiceStub

# –ê–¥—Ä–µ—Å gRPC —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
GRPC_SERVER_ADDRESS = "localhost:xxxx"

@pytest.fixture(scope="module")
def grpc_channel():
    """–°–æ–∑–¥–∞–µ—Ç gRPC –∫–∞–Ω–∞–ª –¥–ª—è —Å–≤—è–∑–∏ —Å UnitService."""
    channel = grpc.insecure_channel(GRPC_SERVER_ADDRESS)
    yield channel
    channel.close()

@pytest.fixture(scope="module")
def unit_service_stub(grpc_channel):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Stub –¥–ª—è UnitService."""
    return DashboardServiceStub(grpc_channel)


def test_list_units_returns_valid_response(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ API ListUnits –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ø–∏—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π 'units' –∏ 'totalItems'.
    """
    request = ListUnitsRequest(page=1, pageSize=10)  # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–≤—ã–µ 10 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    response = unit_service_stub.ListUnits(request)

    assert response is not None, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert hasattr(response, "units"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'units'"
    assert isinstance(response.totalItems, int), "'totalItems' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"

def test_list_units_pagination(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ API ListUnits.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    request = ListUnitsRequest(page=2, pageSize=5)  # –ó–∞–ø—Ä–æ—Å–∏—Ç—å 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    response = unit_service_stub.ListUnits(request)

    assert len(response.units) <= 5, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å pageSize"
    assert isinstance(response.totalItems, int), "'totalItems' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"

def test_list_units_filter_by_status(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ API ListUnits.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
    """
    request = ListUnitsRequest(status="Active", page=1, pageSize=5)
    response = unit_service_stub.ListUnits(request)

    assert response is not None, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    for unit in response.units:
        assert unit.status == "Active", f"–û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å 'Active', –Ω–æ –ø–æ–ª—É—á–µ–Ω {unit.status}"

def test_list_units_sort_by_last_communication(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤—è–∑–∏.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
    """
    request = ListUnitsRequest(sortBy="lastCommunication", page=1, pageSize=5)
    response = unit_service_stub.ListUnits(request)

    timestamps = [unit.lastCommunicationTimestamp for unit in response.units]
    assert timestamps == sorted(timestamps, reverse=True), "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ lastCommunicationTimestamp"

def test_list_units_access_control(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –ø–æ–ª—É—á–∞—é—Ç –æ—à–∏–±–∫—É PERMISSION_DENIED.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = ListUnitsRequest()
        unit_service_stub.ListUnits(request)

    assert exc_info.value.code() == grpc.StatusCode.PERMISSION_DENIED, "–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: PERMISSION_DENIED"
