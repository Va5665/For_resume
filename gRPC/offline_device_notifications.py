import grpc
import pytest
import sys, os

current_dir = os.path.dirname(__file__)
sys.path.append(current_dir)

from Protos.web_api.v1 import common_pb2
from Protos.web_api.v1.units_pb2 import GetOfflineNotificationsRequest  # –ò–º–ø–æ—Ä—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ Protobuf
from Protos.web_api.v1.units_pb2_grpc import UnitsServiceStub  # –ò–º–ø–æ—Ä—Ç gRPC –∫–ª–∏–µ–Ω—Ç–∞


GRPC_SERVER_ADDRESS = "localhost:xxxx"

@pytest.fixture(scope="module")
def grpc_channel():
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª gRPC –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å UnitService."""
    channel = grpc.insecure_channel(GRPC_SERVER_ADDRESS)
    yield channel
    channel.close()

@pytest.fixture(scope="module")
def unit_service_stub(grpc_channel):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è UnitService."""
    return UnitsServiceStub(grpc_channel)


def test_get_offline_device_notifications_valid(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ API GetOfflineNotifications –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ø–∏—Å–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π.
    """
    request = GetOfflineNotificationsRequest(companyId=1, duration=30)  # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –æ—Ñ—Ñ–ª–∞–π–Ω –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
    response = unit_service_stub.GetOfflineNotifications(request)

    assert response is not None, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert hasattr(response, "notifications"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'notifications'"

    for notification in response.notifications:
        assert hasattr(notification, "unitId"), "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'unitId'"
        assert hasattr(notification, "timestamp"), "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'timestamp'"
        assert hasattr(notification, "text"), "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'text'"
        assert hasattr(notification, "severity"), "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'severity'"

def test_get_offline_device_notifications_no_results(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±—ã –æ—Ñ—Ñ–ª–∞–π–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    request = GetOfflineNotificationsRequest(companyId=1, duration=9999)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è
    response = unit_service_stub.GetOfflineNotifications(request)

    assert len(response.notifications) == 0, "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º"

def test_get_offline_device_notifications_invalid_company_id(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ API GetOfflineNotifications –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∫–æ–º–ø–∞–Ω–∏–π.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É NOT_FOUND –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö ID –∫–æ–º–ø–∞–Ω–∏–π.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = GetOfflineNotificationsRequest(companyId=99999, duration=30)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –∫–æ–º–ø–∞–Ω–∏–∏
        unit_service_stub.GetOfflineNotifications(request)

    assert exc_info.value.code() == grpc.StatusCode.NOT_FOUND, "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ NOT_FOUND –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID –∫–æ–º–ø–∞–Ω–∏–∏"

def test_get_offline_device_notifications_invalid_duration(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ API GetOfflineNotifications –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É INVALID_ARGUMENT –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = GetOfflineNotificationsRequest(companyId=1, duration=-10)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        unit_service_stub.GetOfflineNotifications(request)

    assert exc_info.value.code() == grpc.StatusCode.INVALID_ARGUMENT, "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ INVALID_ARGUMENT –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"

def test_get_offline_device_notifications_access_control(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤ –ø–æ–ª—É—á–∞—é—Ç –æ—à–∏–±–∫—É PERMISSION_DENIED.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = GetOfflineNotificationsRequest(companyId=1, duration=30)
        unit_service_stub.GetOfflineNotifications(request)

    assert exc_info.value.code() == grpc.StatusCode.PERMISSION_DENIED, "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ PERMISSION_DENIED"
