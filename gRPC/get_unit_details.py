
import grpc
import pytest
import sys, os

current_dir = os.path.dirname(__file__)
sys.path.append(current_dir)

from Protos.web_api.v1 import common_pb2
from Protos.web_api.v1.units_pb2 import GetUnitRequest  # –ò–º–ø–æ—Ä—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ Protobuf
from Protos.web_api.v1.units_pb2_grpc import UnitsServiceStub  # –ò–º–ø–æ—Ä—Ç gRPC-–∫–ª–∏–µ–Ω—Ç–∞

# –ê–¥—Ä–µ—Å gRPC-—Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
GRPC_SERVER_ADDRESS = "localhost:xxxxxx"

@pytest.fixture(scope="module")
def grpc_channel():
    """–°–æ–∑–¥–∞–µ—Ç gRPC-–∫–∞–Ω–∞–ª –¥–ª—è —Å–≤—è–∑–∏ —Å UnitService."""
    channel = grpc.insecure_channel(GRPC_SERVER_ADDRESS)
    yield channel
    channel.close()

@pytest.fixture(scope="module")
def unit_service_stub(grpc_channel):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è UnitService."""
    return UnitsServiceStub(grpc_channel)



def test_get_unit_details_valid_response(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ API GetUnit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.
    - –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π.
    """
    request = GetUnitRequest(unitId=1)  # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å ID 1
    response = unit_service_stub.GetUnit(request)

    assert response is not None, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert response.id == 1, "ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º"
    assert hasattr(response, "name"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'name'"
    assert hasattr(response, "model"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'model'"
    assert hasattr(response, "contacts"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'contacts'"
    assert hasattr(response, "isInAlert"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'isInAlert'"
    assert hasattr(response, "notes"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'notes'"

def test_get_unit_details_invalid_unit_id(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ unitId –≤ API GetUnit.
    - API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É NOT_FOUND –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = GetUnitRequest(unitId=99999)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        unit_service_stub.GetUnit(request)

    assert exc_info.value.code() == grpc.StatusCode.NOT_FOUND, "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ NOT_FOUND –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ unitId"

def test_get_unit_details_access_control(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
    - API –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å PERMISSION_DENIED –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = GetUnitRequest(unitId=1)  # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        unit_service_stub.GetUnit(request)

    assert exc_info.value.code() == grpc.StatusCode.PERMISSION_DENIED, "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ PERMISSION_DENIED"
