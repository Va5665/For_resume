import grpc
import pytest
import sys, os

current_dir = os.path.dirname(__file__)
sys.path.append(current_dir)

from Protos.web_api.v1 import common_pb2
from Protos.web_api.v1.units_pb2 import SetResponsibleRequest
from Protos.web_api.v1.units_pb2_grpc import UnitsServiceStub

# –ê–¥—Ä–µ—Å gRPC-—Å–µ—Ä–≤–µ—Ä–∞ (–æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
GRPC_SERVER_ADDRESS = "localhost:50051xxxxx"

@pytest.fixture(scope="module")
def grpc_channel():
    """–°–æ–∑–¥–∞—ë—Ç gRPC-–∫–∞–Ω–∞–ª –¥–ª—è —Å–≤—è–∑–∏ —Å UnitsService."""
    channel = grpc.insecure_channel(GRPC_SERVER_ADDRESS)
    yield channel
    channel.close()

@pytest.fixture(scope="module")
def unit_service_stub(grpc_channel):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å—Ç–∞–± –¥–ª—è UnitsService."""
    return UnitsServiceStub(grpc_channel)



def test_set_responsible_valid(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API SetResponsible —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
    - –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω.
    """
    request = SetResponsibleRequest(unitId=1, employeeId=1001)
    response = unit_service_stub.SetResponsible(request)

    assert response is not None, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None"
    assert response.success, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"

def test_set_responsible_nonexistent_unit(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API SetResponsible –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    - –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É NOT_FOUND –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = SetResponsibleRequest(unitId=99999, employeeId=1001)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        unit_service_stub.SetResponsible(request)

    assert exc_info.value.code() == grpc.StatusCode.NOT_FOUND, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ NOT_FOUND –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"

def test_set_responsible_nonexistent_employee(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API SetResponsible –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    - –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É NOT_FOUND –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = SetResponsibleRequest(unitId=1, employeeId=99999)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        unit_service_stub.SetResponsible(request)

    assert exc_info.value.code() == grpc.StatusCode.NOT_FOUND, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ NOT_FOUND –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"

def test_set_responsible_access_control(unit_service_stub):
    """
    üìå –¢–µ—Å—Ç-–∫–µ–π—Å: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞.
    - –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –ø–æ–ª—É—á–∞—é—Ç –æ—à–∏–±–∫—É PERMISSION_DENIED.
    """
    with pytest.raises(grpc.RpcError) as exc_info:
        request = SetResponsibleRequest(unitId=1, employeeId=1001)  # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ID 1001
        unit_service_stub.SetResponsible(request)

    assert exc_info.value.code() == grpc.StatusCode.PERMISSION_DENIED, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ PERMISSION_DENIED"

