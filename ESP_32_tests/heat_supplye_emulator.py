#  –≠–º—É–ª—è—Ç–æ—Ä –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –û—Ç–æ–ø–ª–µ–Ω–∏—è  –Ω–∞ ESP32 —Å MicroPython.

# –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π —É–ª–∏—Ü—ã, –≤–∫–ª—é—á–∞–µ—Ç—Å—è **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç–º—É–ª—è—Ü–∏—è**:
#
# - üåô `night_temp = 2.0¬∞C`
# - ‚òÄÔ∏è `day_temp = 10.0¬∞C`
# - üåÖ `sunrise = 6:00`
# - üåá `sunset = 18:00`
#
# **–î–∞–≤–ª–µ–Ω–∏–µ** –≤—Å–µ–≥–¥–∞ —ç–º—É–ª–∏—Ä—É–µ—Ç—Å—è  **2 –±–∞—Ä–∞**.
#
# üå°Ô∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä:
#
# - –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É–ª–∏—Ü—ã: –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏.
# - –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—Ç–ª–∞:
#   - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–æ–º–µ —Ä–∞—Å—Ç—ë—Ç —Å 20¬∞C –Ω–∞ `+0.01¬∞C –≤ –º–∏–Ω—É—Ç—É`.
#   - –ü–∞–¥–∞–µ—Ç –Ω–∞ `-0.001¬∞C –≤ –º–∏–Ω—É—Ç—É`, –Ω–æ –Ω–µ –Ω–∏–∂–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É–ª–∏—Ü—ã.
#   - –ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–º–∞: `45¬∞C`.
# - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ **–ø—Ä—è–º–æ–π —Ç—Ä—É–±—ã**: `+5¬∞C –≤ –º–∏–Ω—É—Ç—É`, –º–∞–∫—Å: `51¬∞C`.
# - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ **–æ–±—Ä–∞—Ç–∫–∏**: —Ç–æ–∂–µ `+5¬∞C –≤ –º–∏–Ω—É—Ç—É`, –Ω–æ **—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 –º–∏–Ω—É—Ç—ã**, –º–∞–∫—Å: `42¬∞C`.
#
#  üö∞ –ù–∞—Å–æ—Å:
#
# - –í–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ç–ª–∞.
# - –ü–æ—Ç–æ–∫: `10-13 –ª/–º–∏–Ω`.
# - –†–∞–±–æ—Ç–∞–µ—Ç –µ—â—ë **5 –º–∏–Ω—É—Ç** –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ç–ª–∞.
#
# ---
#
#  üåê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ API
#
# 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ [OpenWeatherMap](http://api.openweathermap.org).
# 2. –ü–æ–ª—É—á–∏—Ç–µ API-–∫–ª—é—á.
# 3. –£–∫–∞–∂–∏—Ç–µ:
#    - –ì–æ—Ä–æ–¥.
#    # - –õ–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –æ—Ç Wi-Fi –≤ —Å–∫—Ä–∏–ø—Ç–µ.



import urequests
import network
import time
import math
import ntptime
from machine import Pin, DAC, PWM, RTC
import utime
import _thread

rtc = RTC()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi
SSID = "—Ö—Ö—Ö—Ö—Ö"
PASSWORD = "—Ö—Ö—Ö—Ö—Ö"

# API OpenWeatherMap
API_KEY = "2f—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö3d"
CITY = "Yakutsk"
URL = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
temperature_home_pwm = PWM(Pin(32), freq=10000)
temperature_outdoor_pwm = PWM(Pin(33), freq=10000)
temperature_out_t_4_pwm = PWM(Pin(18), freq=10000)  # –ù–æ–≤—ã–π PWM –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–æ—Ç–ª–∞
rele = Pin(13, Pin.IN, Pin.PULL_DOWN)  # –†–µ–ª–µ –∫–æ—Ç–ª–∞
flow_pwm = PWM(Pin(27))  # –î–∞—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–∞
temperature_in_t_3_pwm = PWM(Pin(12), freq=10000)
P_BASE = 1.6
pressure_dac = DAC(Pin(26))  # –î–∞–≤–ª–µ–Ω–∏–µ (DAC)
indicator_led = Pin(2, Pin.OUT)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–º—É–ª—è—Ü–∏–∏
temp_home = 20.0  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–æ–º–µ
temp_boiler_output = None  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –∫–æ—Ç–ª–∞
TEMP_INCREASE = 0.01  # ¬∞C –≤ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º —Ä–µ–ª–µ
TEMP_HOLD_TIME = 5  # –ú–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ª–µ, –∫–æ–≥–¥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏
UPDATE_INTERVAL = 60  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å API (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, 1 –º–∏–Ω—É—Ç–∞)
FLOW_TICKS_PER_LITER = 475  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤ –Ω–∞ 1 –ª–∏—Ç—Ä
flow_active = False
flow_timer = 0  # –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–ª–µ
last_trigger_time = 0
DEBOUNCE_DELAY_MS = 200  # –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—Ä–µ–±–µ–∑–≥–∞
def connect_wifi():
    sta_if = network.WLAN(network.STA_IF)
    sta_if.active(True)
    sta_if.connect(SSID, PASSWORD)
    for _ in range(10):
        if sta_if.isconnected():
            break
        print(".", end="")
        time.sleep(1)
    if sta_if.isconnected():
        print("\n‚úÖ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω:", sta_if.ifconfig()[0])
        return True
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi")
        return False
def fallback_manual_time():
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏.")
    rtc.datetime((2025, 4, 7, 0, 17, 15, 0, 0))  # (–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á–∞—Å, –º–∏–Ω—É—Ç–∞, —Å–µ–∫—É–Ω–¥–∞, –º—Å)
    print("üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Ä—É—á–Ω–æ–µ):", time.localtime())
def set_time():
    if connect_wifi():
        try:
            ntptime.settime()
            print("‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å NTP:", time.localtime())
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å NTP:", e)
            fallback_manual_time()
    else:
        fallback_manual_time()

start_timestamp = time.time()
current_time = time.localtime()
print("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:", current_time)
def set_initial_pressure():
    global pressure
    voltage = pressure_to_voltage(P_BASE)
    dac_value = int((voltage / 3.3) * 255)
    pressure_dac.write(dac_value)
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {P_BASE:.2f} –∞—Ç–º | {voltage:.2f}V")
def pressure_to_voltage(pressure_atm):
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞: 0 –∞—Ç–º -> 0.5–í, 4 –∞—Ç–º -> 2.5–í
    # (–º–æ–∂–Ω–æ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ç–≤–æ—é –ª–∏–Ω–µ–π–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É DAC)
    min_pressure = 0
    max_pressure = 4
    min_voltage = 0.5
    max_voltage = 2.5

    if pressure_atm <= min_pressure:
        return min_voltage
    elif pressure_atm >= max_pressure:
        return max_voltage
    else:
        return min_voltage + (pressure_atm - min_pressure) * (max_voltage - min_voltage) / (max_pressure - min_pressure)

def simulate_outdoor_temperature(hour):
    night_temp = 2.0
    day_temp = 10.0
    sunrise = 6
    sunset = 18

    hour = hour % 24

    if hour < sunrise or hour >= sunset:
        # –ú—è–≥–∫–∞—è —Å–∏–Ω—É—Å–æ–∏–¥–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å
        value = math.sin(math.pi * hour / (sunrise + 2))
        value = max(0, value)  # –æ–±—Ä—É–±–∞–µ–º –º–∏–Ω—É—Å
        return night_temp + 2 * value
    else:
        peak = sunrise + (sunset - sunrise) * 0.5
        if hour < peak:
            return night_temp + (day_temp - night_temp) * (hour - sunrise) / (peak - sunrise)
        else:
            return day_temp - (day_temp - night_temp) * (hour - peak) / (sunset - peak)
def get_temperature():
    try:
        response = urequests.get(URL)
        data = response.json()
        temp_outdoor = data["main"]["temp"]
        print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {CITY}: {temp_outdoor}¬∞C (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        return temp_outdoor
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        elapsed_seconds = time.time() - start_timestamp
        current_hour = (elapsed_seconds / 3600) % 24  # –ß–∞—Å –æ—Ç 0 –¥–æ 24
        simulated_temp = simulate_outdoor_temperature(current_hour)
        print(f"[SIMULATION] –≠–º—É–ª–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É: {simulated_temp:.2f}¬∞C (—á: {current_hour:.1f})")
        return simulated_temp

def temperature_to_voltage(temp_c):
    if temp_c is None:
        print("[ERROR] –ü–æ–ª—É—á–µ–Ω–æ None –≤ temperature_to_voltage, –≤–æ–∑–≤—Ä–∞—â–∞—é 1.65 –í")
        return 1.65  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    temperature_points = [-20, -11, -1.5, 4, 8.8, 18, 45, 70]
    voltage_points = [3.0, 2.86, 2.62, 2.46, 2.3, 2.0, 1.04, 0.52]

    if temp_c >= temperature_points[-1]:
        return voltage_points[-1]
    if temp_c <= temperature_points[0]:
        return voltage_points[0]
    for i in range(len(temperature_points) - 1):
        if temperature_points[i] <= temp_c <= temperature_points[i + 1]:
            t1, t2 = temperature_points[i], temperature_points[i + 1]
            v1, v2 = voltage_points[i], voltage_points[i + 1]
            return v1 + (v2 - v1) * (temp_c - t1) / (t2 - t1)
    return 1.65

def emulate_temperature_pwm(temp_c, pwm):
    if temp_c is None:
        print("[WARNING] –ü–µ—Ä–µ–¥–∞–Ω–∞ None —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ emulate_temperature_pwm, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return
    voltage = temperature_to_voltage(temp_c)
    duty = int(voltage / 3.3 * 1023)
    pwm.duty(duty)
    print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C -> –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {voltage:.2f} –í")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ –≤—ã—Ö–æ–¥–µ –∫–æ—Ç–ª–∞

def update_boiler_output_temperature():
    global cooldown_timer, temp_boiler_output

    if temp_boiler_output is None:
        print("[WARNING] temp_boiler_output –±—ã–ª None, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º temp_home")
        temp_boiler_output = temp_home  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –¥–æ–º–∞

    if rele.value():
        temp_boiler_output = min(temp_boiler_output + 5, 51)
        cooldown_timer = 0  # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–ª–µ
    else:
        cooldown_timer += 1

        if cooldown_timer <= 5:
            temp_boiler_output -= 1
        elif cooldown_timer <= 20:
            temp_boiler_output -= 0.5
        else:
            temp_boiler_output -= 0.3

        temp_boiler_output = max(temp_boiler_output, temp_home)  # –ù–µ –¥–∞—ë–º –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂–µ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    add_temperature(temp_boiler_output)  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤—ã—Ö–æ–¥–∞
    print(f" –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –∫–æ—Ç–ª–∞: {temp_boiler_output:.2f}¬∞C")
    if temp_boiler_output is not None:
        emulate_temperature_pwm(temp_boiler_output, temperature_out_t_4_pwm)
temperature_history = []  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 120 –∑–Ω–∞—á–µ–Ω–∏–π
def add_temperature(temp):
    global temperature_history
    temperature_history.append(temp)
    if len(temperature_history) > 120:
        temperature_history.pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

def update_boiler_input_temperature():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (12-–π –ø–∏–Ω) —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 2 –º–∏–Ω—É—Ç—ã"""
    global temp_boiler_input, temp_boiler_output

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ temp_boiler_output –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    if temp_boiler_output is None:
        temp_boiler_output = temp_home  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∑–Ω–∞—á–µ–Ω–∏—è
    if len(temperature_history) >= 2:
        temp_boiler_input = max(temp_home, temperature_history[-2] - 10)  # –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
    else:
        temp_boiler_input = max(temp_home, temp_boiler_output - 10)  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –±–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ

    print(f"–û–±—Ä–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∑–∞–¥–µ—Ä–∂–∫–∞ 2 –º–∏–Ω): {temp_boiler_input:.2f}¬∞C")
    emulate_temperature_pwm(temp_boiler_input, temperature_in_t_3_pwm)

def set_flow_pwm(flow_frequency, duty_cycle):
    global flow_pwm

    if flow_frequency > 500:
        flow_frequency = 500  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ

    if flow_frequency <= 0:
        flow_pwm.duty_u16(0)
        flow_rate = 0
        voltage = 0
    else:
        try:
            flow_pwm.freq(int(flow_frequency))
        except RuntimeError:
            flow_pwm = PWM(Pin(27))
            flow_pwm.freq(int(flow_frequency))

        flow_pwm.duty_u16(int(duty_cycle * 65535 / 100))
        flow_rate = (flow_frequency * 60) / FLOW_TICKS_PER_LITER
        voltage = (flow_rate / 10) * 1.66

    print(f"–î–∞—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–∞ {'–≤–∫–ª—é—á–µ–Ω' if flow_rate > 0 else '–≤—ã–∫–ª—é—á–µ–Ω'}, —Ä–∞—Å—Ö–æ–¥: {flow_rate:.2f} –ª/–º–∏–Ω, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {voltage:.2f} –í")

def reset_flow_pwm():
    global flow_pwm
    flow_pwm.duty_u16(0)
    time.sleep(0.1)
    flow_pwm.freq(1)
    time.sleep(0.1)
    print("–î–∞—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–∞ —Å–±—Ä–æ—à–µ–Ω, —Ä–∞—Å—Ö–æ–¥: 0 –ª/–º–∏–Ω, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 0 –í")

reset_flow_pwm()
cooldown_timer = 0

def heartbeat_led():
    while True:
        print("[HB] üíì")
        indicator_led.value(1)
        utime.sleep(0.5)
        indicator_led.value(0)
        utime.sleep(0.5)


def handle_relay(pin):
    print(f"[INTERRUPT] –°—Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ –ø–∏–Ω–µ {pin}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {pin.value()}")

    global last_trigger_time

    now = utime.ticks_ms()
    if utime.ticks_diff(now, last_trigger_time) < DEBOUNCE_DELAY_MS:
        print("‚ùå –î—Ä–µ–±–µ–∑–≥, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        return

    last_trigger_time = now
    state = pin.value()
    print(f"‚úÖ –†–µ–ª–µ –∏–∑–º–µ–Ω–∏–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞: {state}")
rele.irq(trigger=Pin.IRQ_RISING | Pin.IRQ_FALLING, handler=handle_relay)


def main():
    global temp_home, flow_active, flow_timer, temp_boiler_output, temp_boiler_input

    temp_boiler_output = None
    temp_boiler_input = None

    try:
        wifi_connected = connect_wifi()
        set_initial_pressure()
        real_temp_mode = False
        temp_outdoor = None
        _thread.start_new_thread(heartbeat_led, ())

        if wifi_connected:
            temp_outdoor = get_temperature()
            if temp_outdoor is not None:
                emulate_temperature_pwm(temp_outdoor, temperature_outdoor_pwm)
                print(f"üì° [–†–µ–∂–∏–º: –†–µ–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {CITY}: {temp_outdoor}¬∞C")
                real_temp_mode = True
            else:
                print("‚ö†Ô∏è Wi-Fi –µ—Å—Ç—å, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, —ç–º—É–ª–∏—Ä—É–µ–º.")
        else:
            print("üåê –ù–µ—Ç Wi-Fi. –í–∫–ª—é—á–µ–Ω–∞ —ç–º—É–ª—è—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.")

        hold_time = 0
        last_update_time = time.time()

        set_flow_pwm(0, 0)

        while True:
            try:
                if real_temp_mode:
                    if time.time() - last_update_time >= UPDATE_INTERVAL:
                        temp_outdoor = get_temperature()
                        if temp_outdoor is not None:
                            emulate_temperature_pwm(temp_outdoor, temperature_outdoor_pwm)
                            print(f"üì° [–û–±–Ω–æ–≤–ª–µ–Ω–æ] –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {CITY}: {temp_outdoor}¬∞C")
                        else:
                            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ.")
                        last_update_time = time.time()
                else:
                    now = time.localtime()
                    current_hour = (
                            now[3] +  # hour
                            now[4] / 60 +  # minute
                            now[5] / 3600  # second
                    )
                    temp_outdoor = simulate_outdoor_temperature(current_hour)
                    emulate_temperature_pwm(temp_outdoor, temperature_outdoor_pwm)
                    print(f"üåÄ [–†–µ–∂–∏–º: –≠–º—É–ª—è—Ü–∏—è] –≠–º—É–ª–∏—Ä—É–µ–º —É–ª–∏—á–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (—Å—É—Ç–∫–∏): {temp_outdoor:.2f}¬∞C")
                    print("üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Ä—É—á–Ω–æ–µ):", time.localtime())
                update_boiler_output_temperature()
                update_boiler_input_temperature()

                if rele.value():
                    temp_home += TEMP_INCREASE
                    if temp_home > 45:
                        temp_home = 45  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                    hold_time = TEMP_HOLD_TIME

                    if not flow_active:
                        set_flow_pwm(80, 50)
                        flow_active = True
                        flow_timer = 5 * 60
                        print("–î–∞—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–∞ –≤–∫–ª—é—á–µ–Ω: 10 –ª/–º–∏–Ω")

                else:
                    if temp_home is None:
                        temp_home = 20.0
                    cooling_rate = max(0.01, (temp_home - temp_outdoor) * 0.005) if temp_outdoor is not None else 0.01

                    if hold_time > 0:
                        hold_time -= 1
                    else:
                        temp_home = max(temp_outdoor, temp_home - cooling_rate)

                    if temp_boiler_output is None:
                        temp_boiler_output = temp_home
                    temp_boiler_output = max(temp_outdoor, temp_boiler_output - cooling_rate)
                    emulate_temperature_pwm(temp_boiler_output, temperature_out_t_4_pwm)
                    print("–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –∫–æ—Ç–ª–∞: %.2f¬∞C" % temp_boiler_output)

                    if temp_boiler_input is None:
                        temp_boiler_input = temp_home
                    temp_boiler_input = max(temp_outdoor, temp_boiler_input - cooling_rate)
                    emulate_temperature_pwm(temp_boiler_input, temperature_in_t_3_pwm)
                    print("–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∫–∏: %.2f¬∞C" % temp_boiler_input)

                    if flow_active:
                        if flow_timer > 0:
                            flow_timer -= 60
                        else:
                            set_flow_pwm(0, 0)
                            flow_active = False
                            print("–î–∞—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω")

                emulate_temperature_pwm(temp_home, temperature_home_pwm)
                print("–†–µ–ª–µ %s. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–æ–º–µ: %.2f¬∞C" % ("–í–ö–õ" if rele.value() else "–í–´–ö–õ", temp_home))

                print("[DEBUG] temp_home=%.2f" % temp_home)

                temp_boiler_output_str = "None" if temp_boiler_output is None else "%.2f" % temp_boiler_output
                print("[DEBUG] temp_boiler_output=" + temp_boiler_output_str)

                temp_boiler_input_str = "None" if temp_boiler_input is None else "%.2f" % temp_boiler_input
                print("[DEBUG] temp_boiler_input=" + temp_boiler_input_str)

                print("[DEBUG] flow_active=%s, flow_timer=%d" % (flow_active, flow_timer))

                temp_outdoor_str = "None" if temp_outdoor is None else "%.2f" % temp_outdoor
                print("[DEBUG] temp_city=" + CITY + ", temp_value=" + temp_outdoor_str)

            except Exception as e:
                print(f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")

            time.sleep(60)


    except Exception as e:
        print(f"[FATAL ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        time.sleep(10)
        main()


def main_loop():
    while True:
        try:
            main()
        except Exception as e:
            print(f"[FATAL ERROR] –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø–∞–ª–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


if __name__ == "__main__":
    main_loop()
