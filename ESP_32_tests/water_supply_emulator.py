 # –≠–º—É–ª—è—Ç–æ—Ä –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ

# –°–∫—Ä–∏–ø—Ç  –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–æ–¥—ã –Ω–∞ –±–∞–∑–µ **ESP32 —Å MicroPython**.

# ## üõ†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
#
# ### üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å–æ—Å–æ–º
#
# | –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å–æ—Å–∞ | –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∞–Ω–∞ | –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
#
# | –í–ö–õ                     | –ó–∞–∫—Ä—ã—Ç               | ‚ûï –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ **‚âà +0.033 –∞—Ç–º/—Å–µ–∫**
# | –í–ö–õ                     | –û—Ç–∫—Ä—ã—Ç               | ‚ûï –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ **‚âà +0.0067 –∞—Ç–º/—Å–µ–∫**
# | –í–´–ö–õ                    | –û—Ç–∫—Ä—ã—Ç               | ‚ûñ –ü–∞–¥–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è **‚âà -0.0267 –∞—Ç–º/—Å–µ–∫**
# | –í–´–ö–õ                    | –ó–∞–∫—Ä—ã—Ç               | ‚ûñ –î–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
#
# ---
#
# ### üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã
#
# - –ù–∞—Å–æ—Å **–≤–∫–ª—é—á–µ–Ω** ‚Üí —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ **—Å–Ω–∏–∂–∞–µ—Ç—Å—è** –Ω–∞ **-1.0 ¬∞C –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥**
# - –ù–∞—Å–æ—Å **–≤—ã–∫–ª—é—á–µ–Ω** ‚Üí —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ **–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è** –Ω–∞ **+0.0083 ¬∞C/—Å–µ–∫**
#
# ---
#
# ### üí¶ –†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã
#
# - –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ ‚Äî **–∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã PWM —Å–∏–≥–Ω–∞–ª–∞**
# - –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç **—Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∞–Ω–∞**
#
# ---
#
# ## üö∞ –†–∞–±–æ—Ç–∞ –∫—Ä–∞–Ω–∞
#
# - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è **–¥–≤–∞ –ø–∏–Ω–∞**:
#   - `Pin(35)` ‚Äî –∫—Ä–∞–Ω –æ—Ç–∫—Ä—ã—Ç
#   - `Pin(32)` ‚Äî –∫—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç
# - –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî **–º–µ–Ω—è–µ—Ç—Å—è —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã**
#
# ---
#
# ## ‚ö° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∏–Ω–æ–≤
#
# | –ü–∏–Ω ESP32          | –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
# | `DAC(Pin 25)`      | –ê–Ω–∞–ª–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–∞–≤–ª–µ–Ω–∏—è
# | `PWM(Pin 33)`      | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã —á–µ—Ä–µ–∑ NTC
# | `PWM(Pin 27)`      | –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–¥—ã
# | `Pin(13)`          | –í—Ö–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å–æ—Å–æ–º (–≤–∫–ª/–≤—ã–∫–ª)
# | `Pin(35)`          | –°–∏–≥–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏—è –∫—Ä–∞–Ω–∞
# | `Pin(32)`          | –°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç–∏—è –∫—Ä–∞–Ω–∞
#
# ---
#
# ## üß∞ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
#
# –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫—Ä–∞–Ω—É –∏—Å–ø–æ–ª—å–∑—É–µ–º **–¥–≤–∞ –¥–µ–ª–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è** (—Å 12V –¥–æ 3.3V).
#
# –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ 2 –¥–µ–ª–∏—Ç–µ–ª—è –∏–∑ 12v –≤ 3v –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–∏–∂–µ
#
# ![img.png](img.png)
#
# - –û–¥–∏–Ω –¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É **Pin 35** –∏ **–æ–¥–Ω–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º** –∫–ª–µ–º–º—ã –∫—Ä–∞–Ω–∞.
# - –í—Ç–æ—Ä–æ–π ‚Äî –º–µ–∂–¥—É **Pin 32** –∏ **–≤—Ç–æ—Ä—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º**.
# - **GND** —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã 12V ‚Äî –∫ –∑–µ–º–ª–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
# # - **GND** —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã 3.3V ‚Äî –∫ –∑–µ–º–ª–µ –ø–ª–∞—Ç—ã ESP32.


import time
from machine import Pin, DAC, PWM
import utime
import _thread  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
from micropython import const
DEBOUNCE_DELAY_MS = const(200)
_last_irq_times = {}
pump = Pin(13, Pin.IN, Pin.PULL_DOWN)  # –ù–∞—Å–æ—Å
pressure_dac = DAC(Pin(25))  # –î–∞–≤–ª–µ–Ω–∏–µ (DAC)
ntc_pwm = PWM(Pin(33), freq=10000)  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (PWM)
flow_pwm = PWM(Pin(27), freq=1)  # –†–∞—Å—Ö–æ–¥–æ–º–µ—Ç—Ä (PWM)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∏–Ω—ã –∫—Ä–∞–Ω–∞ —Å –ø–æ–¥—Ç—è–∂–∫–æ–π –≤–Ω–∏–∑ (PULL_DOWN)
tap_open = Pin(35, Pin.IN, Pin.PULL_DOWN)  # –ö—Ä–∞–Ω –æ—Ç–∫—Ä—ã—Ç
tap_close = Pin(32, Pin.IN, Pin.PULL_DOWN)  # –ö—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç

indicator_led = Pin(2, Pin.OUT)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEMP_MIN = 10.0
TEMP_MAX = 23.0
P_MIN = 0.0
P_MAX_DEVICE = 6.0
V_MIN = 0.5
V_MAX = 4.5
P_BASE = 0.5

FLOW_TICKS_PER_LITER = 650
FLOW_RATE = 5.0
FLOW_TOLERANCE = 0.3

# –°–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è
PRESSURE_RISE_RATE = 2.0 / 60
PRESSURE_FALL_RATE = 1.6 / 60

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
TEMP_FALL_RATE = 1.0
TEMP_RISE_RATE = 0.1 / 12

tap_state = "–ó–ê–ö–†–´–¢"
pressure = P_BASE
temperature = TEMP_MAX
pump_state = False

def debounce(pin_name):
    def decorator(func):
        def wrapper(pin):
            global _last_irq_times
            now = utime.ticks_ms()
            last_time = _last_irq_times.get(pin_name, 0)

            if utime.ticks_diff(now, last_time) > DEBOUNCE_DELAY_MS:
                _last_irq_times[pin_name] = now
                func(pin)
        return wrapper
    return decorator


@debounce("pump")
def pump_callback(pin):
    global pump_state
    value = safe_value(pin.value(), 0, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å–æ—Å–∞")
    pump_state = bool(value)
    print(f"–°–æ–±—ã—Ç–∏–µ –æ—Ç –Ω–∞—Å–æ—Å–∞: {'–í–ö–õ–Æ–ß–ï–ù' if pump_state else '–í–´–ö–õ–Æ–ß–ï–ù'}")



def safe_value(value, default=0, var_name="–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è"):
    if value is None:
        print(f"[WARNING] {var_name} –±—ã–ª–∞ None, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ {default}")
        return default
    return value


def pressure_to_voltage(pressure):
    pressure = safe_value(pressure, P_BASE, "–î–∞–≤–ª–µ–Ω–∏–µ")
    return V_MIN + (pressure / P_MAX_DEVICE) * (V_MAX - V_MIN) * 0.79


def temperature_to_voltage(temperature):
    temperature = safe_value(temperature, TEMP_MAX, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")

    if temperature >= 45.42:
        return 0.5 + ((67.0 - temperature) / (67.0 - 45.42)) * (1.0 - 0.5)
    elif temperature >= 15.0:
        return 1.0 + ((45.42 - temperature) / (45.42 - 15.0)) * (2.0 - 1.0)
    else:
        return 2.0 + ((15.0 - temperature) / (15.0 - (-12.8))) * (3.0 - 2.0)


def temperature_to_pwm_value(temperature):
    voltage = temperature_to_voltage(temperature)
    voltage = safe_value(voltage, 1.65, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ")
    return int((voltage / 3.3) * 1023)


def get_voltage(value, max_value=1023, v_max=3.3):
    value = safe_value(value, 0, "–ó–Ω–∞—á–µ–Ω–∏–µ PWM")
    return (value / max_value) * v_max

@debounce("tap")
def tap_callback(pin):
    global tap_state
    time.sleep_ms(50)

    pin_value = safe_value(pin.value(), 0, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–∞ –∫—Ä–∞–Ω–∞")
    if pin_value:
        if pin == tap_open and tap_state != "–û–¢–ö–†–´–¢":
            print("–ö—Ä–∞–Ω –û–¢–ö–†–´–¢")
            tap_state = "–û–¢–ö–†–´–¢"
            set_flow_pwm(54, 50)

        elif pin == tap_close and tap_state != "–ó–ê–ö–†–´–¢":
            print("–ö—Ä–∞–Ω –ó–ê–ö–†–´–¢")
            tap_state = "–ó–ê–ö–†–´–¢"
            set_flow_pwm(0, 0)


def set_flow_pwm(flow_frequency, duty_cycle):
    global flow_pwm

    flow_frequency = safe_value(flow_frequency, 0, "–ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞")
    duty_cycle = safe_value(duty_cycle, 0, "–®–ò–ú —Ä–∞—Å—Ö–æ–¥–∞")

    if flow_frequency > 500:
        flow_frequency = 500

    if flow_frequency <= 0:
        flow_pwm.duty_u16(0)
        print("–†–∞—Å—Ö–æ–¥: 0 –ª/–º–∏–Ω")
    else:
        try:
            flow_pwm.freq(int(flow_frequency))
        except RuntimeError:
            flow_pwm = PWM(Pin(27))
            flow_pwm.freq(int(flow_frequency))

        flow_pwm.duty_u16(int(duty_cycle * 65535 / 100))
        flow_rate = (flow_frequency * 60) / FLOW_TICKS_PER_LITER
        print(f"–†–∞—Å—Ö–æ–¥: {flow_rate:.2f} –ª/–º–∏–Ω")


def set_initial_pressure():
    global pressure
    voltage = pressure_to_voltage(P_BASE)
    dac_value = int((voltage / 3.3) * 255)
    pressure_dac.write(dac_value)
    print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {P_BASE:.2f} –∞—Ç–º | {voltage:.2f}V")


def emulate_pressure_and_temp():
    global pressure, temperature, pump_state

    pump_value = safe_value(pump.value(), 0, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å–æ—Å–∞")
    pump_state = bool(pump_value)

    if pump_state:
        if tap_state == "–ó–ê–ö–†–´–¢":
            pressure += PRESSURE_RISE_RATE
            print("–ù–∞—Å–æ—Å –í–ö–õ–Æ–ß–ï–ù, –∫—Ä–∞–Ω –ó–ê–ö–†–´–¢ -> –î–∞–≤–ª–µ–Ω–∏–µ –†–ê–°–¢–ï–¢ –ë–´–°–¢–†–û")
        elif tap_state == "–û–¢–ö–†–´–¢":
            pressure_change = PRESSURE_RISE_RATE - PRESSURE_FALL_RATE
            pressure += pressure_change
            print(f"–ù–∞—Å–æ—Å –í–ö–õ–Æ–ß–ï–ù, –∫—Ä–∞–Ω –û–¢–ö–†–´–¢ -> –î–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç –ú–ï–î–õ–ï–ù–ù–û –Ω–∞ {pressure_change:.4f} –∞—Ç–º/—Å–µ–∫")
    else:
        if tap_state == "–û–¢–ö–†–´–¢":
            pressure -= PRESSURE_FALL_RATE
            print(f"–ù–∞—Å–æ—Å –í–´–ö–õ–Æ–ß–ï–ù, –∫—Ä–∞–Ω –û–¢–ö–†–´–¢ -> –î–∞–≤–ª–µ–Ω–∏–µ –ü–ê–î–ê–ï–¢ –Ω–∞ {PRESSURE_FALL_RATE:.4f} –∞—Ç–º/—Å–µ–∫")
        else:
            print("–ù–∞—Å–æ—Å –í–´–ö–õ–Æ–ß–ï–ù, –∫—Ä–∞–Ω –ó–ê–ö–†–´–¢ -> –î–∞–≤–ª–µ–Ω–∏–µ –ù–ï –ò–ó–ú–ï–ù–Ø–ï–¢–°–Ø")

    pressure = safe_value(pressure, P_BASE, "–î–∞–≤–ª–µ–Ω–∏–µ")
    pressure = min(max(pressure, P_MIN), P_MAX_DEVICE)

    voltage = pressure_to_voltage(pressure)
    dac_value = int((voltage / 3.3) * 255)
    pressure_dac.write(dac_value)

    temperature = safe_value(temperature, TEMP_MIN, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    if pump_state:
        if temperature > TEMP_MIN:
            temperature -= TEMP_FALL_RATE
            temperature = max(temperature, TEMP_MIN)
            print(f"–ù–∞—Å–æ—Å –í–ö–õ–Æ–ß–ï–ù -> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ü–ê–î–ê–ï–¢ –Ω–∞ {TEMP_FALL_RATE:.2f}¬∞C")
    else:
        if temperature < TEMP_MAX:
            temperature += TEMP_RISE_RATE
            temperature = min(temperature, TEMP_MAX)
            print(f"–ù–∞—Å–æ—Å –í–´–ö–õ–Æ–ß–ï–ù -> –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –†–ê–°–¢–ï–¢ –Ω–∞ {TEMP_RISE_RATE:.4f}¬∞C")

    temperature = safe_value(temperature, TEMP_MIN, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    pwm_value = temperature_to_pwm_value(temperature)
    ntc_pwm.duty(pwm_value)

    temp_voltage = get_voltage(pwm_value)
    print(f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure:.2f} –∞—Ç–º | {voltage:.2f}V | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature:.2f}¬∞C | {temp_voltage:.2f}V")

def heartbeat_led():
    while True:
        print("[HB] üíì")
        indicator_led.value(1)
        utime.sleep(0.5)
        indicator_led.value(0)
        utime.sleep(0.5)
def main():
    _thread.start_new_thread(heartbeat_led, ())
    tap_open.irq(trigger=Pin.IRQ_RISING, handler=tap_callback)
    tap_close.irq(trigger=Pin.IRQ_RISING, handler=tap_callback)
    pump.irq(trigger=Pin.IRQ_RISING | Pin.IRQ_FALLING, handler=pump_callback)

    set_flow_pwm(0, 0)
    print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –∫—Ä–∞–Ω–∞...")
    set_initial_pressure()

    while True:
        emulate_pressure_and_temp()
        time.sleep(5)



def main_loop():
    while True:
        try:
            main()
        except Exception as e:
            print(f"[FATAL ERROR] –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø–∞–ª–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


if __name__ == "__main__":
    main_loop()
